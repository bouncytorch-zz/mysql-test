<!DOCTYPE html>
<html lang="en">
<head>
	<meta charset="UTF-8">
	<meta name="viewport" content="width=device-width, initial-scale=1.0">
	<title>thing</title>
	<link rel="stylesheet" href="style.css">
</head>
<body>
	<div>
		<% if (errCode) { %>
			<% if (errCode == 0) return;%>
			<% if (errCode == 1) { %>
				<p class="error-message">Error! User registered with this username/email.</p>
			<% } %>
			<% if (errCode == 2) { %>
				<p class="error-message">Error! Invalid credentials.</p>
			<% } %>
		<% } %>
		<h1>Sign-Up</h1>
		<p>This example website is a demonstration for my attempt at authorization.</p>
		<form action="auth?signup=" method="post">
			<label for="">Username</label>
			<input type="text" name="username" placeholder="epic_gamer98">
			<p class="error-message error-username" style="display: none;"></p>
			<label for="">E-mail</label>
			<input type="text" name="email" placeholder="epic_gamer98@myemail.com">
			<p class="error-message error-email" style="display: none;"></p>
			<label for="">Password</label>
			<input type="password" name="password" placeholder="myepicpassword14">
			<p class="error-message error-password" style="display: none;"></p>
			<input type="submit" value="Sign-up" style="padding:2px;" disabled>
		</form>
		<p><a href="auth?signin=">Sign In.</a>  <a href="auth?signup=">Sign Up.</a></p>
	</div>
	<script>
		let confirm = {
			password: false,
			username: false,
			email: false,
		}
		const targetProxy = new Proxy(confirm, {
			set: function (target, key, value) {
				if (targetProxy.password && targetProxy.username && targetProxy.email) { document.querySelector('input[type=submit]').disabled = false; }
				else { document.querySelector('input[type=submit]').disabled = true; }
				target[key] = value;
				return true;
			}
		});
		const passwordError = document.getElementsByClassName('error-message error-password')[0];
		const password = document.querySelector('input[name="password"]');
		password.addEventListener('input', async (e) => {
			setTimeout(() => {
				if (e.target.value != '') {
					const regTest = /^[a-z0-9#$%&'()*+,-./:;<=>?@[\]^_`{|}~]{8,}$/i;
					if (regTest.test(e.target.value)) {
						password.className = '';
						password.style.border = '1px solid #ccc';
						password.style.marginBottom = '10px';
						targetProxy.password = true;
						passwordError.textContent = '';
						passwordError.style.display = 'none';
					}
					else {
						password.className = 'error-input-focus';
						password.style.border = '2px solid #ff0000';
						password.style.marginBottom = '0';
						targetProxy.password = false;
						passwordError.textContent = 'Invalid regex! Username can contain only these characters: A-Z, a-z, 0-9';
						passwordError.style.display = 'block';
					}
				}
			}, 1000);
		});
		const usernameError = document.getElementsByClassName('error-message error-username')[0];
		const username = document.querySelector('input[name="username"]');
		username.addEventListener('input', async (e) => {
			setTimeout(() => {
				if (e.target.value != '') {
					const regTest = /^[a-z0-9_]+$/i;
					if (regTest.test(e.target.value)) {
						fetch('/check?username', {
							method: "POST", 
							headers: {
								'Content-Type': 'application/json',
							},
							body: JSON.stringify({
								username: e.target.value,
							}),
						}).then(response => response.json()).then(data => {
							if (!data.exists) {
								username.className = '';
								username.style.border = '1px solid #ccc';
								username.style.marginBottom = '10px';
								targetProxy.username = true;
								usernameError.textContent = '';
								usernameError.style.display = 'none';
							} else {
								username.className = 'error-input-focus';
								username.style.border = '2px solid #ff0000';
								username.style.marginBottom = '0';
								targetProxy.username = false;
								usernameError.textContent = 'There\'s already a user registered with that username.';
								usernameError.style.display = 'block';
							}
						});
					}
					else {
						username.className = 'error-input-focus';
						username.style.border = '2px solid #ff0000';
						username.style.marginBottom = '0';
						targetProxy.username = false;
						usernameError.textContent = 'Invalid regex! Username can contain only these characters: A-Z, a-z, 0-9';
						usernameError.style.display = 'block';
					}
				}
			}, 1000);
		});
		const emailError = document.getElementsByClassName('error-message error-email')[0];
		const email = document.querySelector('input[name="email"]');
		email.addEventListener('input', async (e) => {
			setTimeout(() => {
				if (e.target.value != '') {
					const regTest = /^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
					if (regTest.test(e.target.value)) {
						fetch('/check?email', {
							method: "POST",
							headers: {
								'Content-Type': 'application/json',
							},
							body: JSON.stringify({
								email: e.target.value,
							}),
						}).then(response => response.json()).then(data => {
							if (!data.exists) {
								email.className = '';
								email.style.border = '1px solid #ccc';
								email.style.marginBottom = '10px';
								targetProxy.email = true;
								emailError.textContent = '';
								emailError.style.display = 'none';
							} else {
								email.className = 'error-input-focus';
								email.style.border = '2px solid #ff0000';
								email.style.marginBottom = '0';
								targetProxy.email = false;
								emailError.textContent = 'There\'s already a user registered with that e-mail.'; 
								emailError.style.display = 'block';
							}
						});
					}
					else {
						email.className = 'error-input-focus';
						email.style.border = '2px solid #ff0000';
						email.style.marginBottom = '0';
						targetProxy.email = false;
						emailError.textContent = 'Invalid regex! Email structure must be \'username@domain\'';
						emailError.style.display = 'block';
					}
				}
			}, 1000);
		});
	</script>
</body>
</html>